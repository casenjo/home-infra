version: "3.5"

services:
  traefik:
    image: traefik:v2.2
    container_name: traefik
    hostname: traefik
    networks:
      traefik:
        ipv4_address: 172.20.0.2
      default:
    dns:
      - 172.20.0.3
    ports:
      # The HTTP and HTTPS ports
      - "80:80"
      - "443:443"
    volumes:
      # Maps to the file that is used in traefik/traefik.toml
      - "./traefik/dynamic.toml:/dynamic.toml"
      - "./traefik/traefik.toml:/traefik.toml"
      - "./certs:/certs"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
    command: --api=true
      --api.dashboard=true
    labels:
      # Enable Traefik for this container (required when using
      # --providers.docker.exposedbydefault=false for Traefik's config)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Add a router named "dashboard" to the routers, which is reached when
      # host is equal to traefik.${DOCKER_DOMAIN_NAME_EXTENSION}
      # and it has /api or /dashboard in the path.
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOCKER_DOMAIN_NAME_EXTENSION}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD}"

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pi-hole
    networks:
      traefik:
        ipv4_address: 172.20.0.3
        #default:
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - target: 53
        published: 53
        protocol: tcp
      - target: 53
        published: 53
        protocol: udp
    environment:
      # Needed to make sure the logs rotate at local midnight instead of UTC
      - "TZ=America/Toronto"
      - "PROXY_LOCATION=pihole.${DOCKER_DOMAIN_NAME_EXTENSION}"
      - "VIRTUAL_PORT=80"
      - "VIRTUAL_HOST=pihole.${DOCKER_DOMAIN_NAME_EXTENSION}"
      - "ServerIP=172.20.0.3"
      - "DNS1=172.20.0.4#5053"
      - "DNS2=1.1.1.1"
    volumes:
      - "./pihole/etc-pihole/:/etc/pihole/"
      - "./pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/"
    restart: always
    labels:
      # Enable Traefik for this container (required when
      # --providers.docker.exposedbydefault=false is in use)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Router: pihole
      # Domain: pihole.${DOCKER_DOMAIN_NAME_EXTENSION}
      # Entrypoint: websecure
      - "traefik.http.routers.pihole.rule=Host(`pihole.${DOCKER_DOMAIN_NAME_EXTENSION}`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls=true"
      # Service: pihole
      # Port:    80
      - "traefik.http.services.pihole-admin.loadbalancer.server.port=80"
      # DNS lookup TCP and UDP routers
      # Router: pihole-tcp/pihole-udp
      # Entrypoint: piholedns-tcp/piholedns-udp
      - "traefik.tcp.routers.pihole-tcp.entrypoints=piholedns-tcp"
      - "traefik.udp.routers.pihole-udp.entrypoints=piholedns-udp"
      # Service: piholedns-tcp/piholedns-udp
      # Port:    53
      - "traefik.tcp.services.piholedns-tcp.loadbalancer.server.port=53"
      - "traefik.udp.services.piholedns-udp.loadbalancer.server.port=53"

  cloudflared:
    image: crazymax/cloudflared:latest
    container_name: cloudflared
    hostname: cloudflared
    networks:
      traefik:
        ipv4_address: 172.20.0.4
    environment:
      - "TZ=America/Toronto"
      - "TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
    restart: always

  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    hostname: portainer
    networks:
      traefik:
        ipv4_address: 172.20.0.5
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data portainer/portainer"
      - "./certs:/certs"
    command: --ssl
      --sslcert /certs/portainer.${DOCKER_DOMAIN_NAME_EXTENSION}.crt
      --sslkey /certs/portainer.${DOCKER_DOMAIN_NAME_EXTENSION}.key
    labels:
      # Enable Traefik for this container (required when using
      # --providers.docker.exposedbydefault=false for Traefik's config)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Create a service called "portainer" and configure its port to 9000
      # since its the port used for Portainer's web UI
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.services.portainer.loadbalancer.server.scheme=https"
      # Add a router named "portainer" to the routers, which is reached when
      # host is equal to portainer.${DOCKER_DOMAIN_NAME_EXTENSION}
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOCKER_DOMAIN_NAME_EXTENSION}`)"
      ## Use the websecure entrypoint for this router
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"

  firefly:
    image: jc5x/firefly-iii:latest
    container_name: firefly
    hostname: firefly
    networks:
      traefik:
        ipv4_address: 172.20.0.7
    environment:
      - "APP_KEY=${FIREFLY_APP_KEY}"
      - "DB_HOST=${FIREFLY_DB_HOST}"
      - "DB_PORT=${FIREFLY_DB_PORT}"
      - "DB_DATABASE=${FIREFLY_DB_DATABASE}"
      - "DB_USERNAME=${FIREFLY_DB_USERNAME}"
      - "DB_PASSWORD=${FIREFLY_DB_PASSWORD}"
      - "DB_CONNECTION=${FIREFLY_DB_CONNECTION}"
      - "TRUSTED_PROXIES=**"
    volumes:
      - "firefly_iii_export:/var/www/firefly-iii/storage/export"
      - "firefly_iii_upload:/var/www/firefly-iii/storage/upload"
    labels:
      # Enable Traefik for this container (required when using
      # --providers.docker.exposedbydefault=false for Traefik's config)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Create a service called "firefly" and configure its port to 8080
      # since its the port used for Firefly III
      - "traefik.http.services.firefly.loadbalancer.server.port=8080"
      # Add a router named "firefly" to the routers, which is reached when
      # host is equal to firefly.${DOCKER_DOMAIN_NAME_EXTENSION}
      - "traefik.http.routers.firefly.rule=Host(`firefly.${DOCKER_DOMAIN_NAME_EXTENSION}`)"
      - "traefik.http.routers.firefly.entrypoints=websecure"
      - "traefik.http.routers.firefly.tls=true"

  unifi-controller:
    image: linuxserver/unifi-controller
    container_name: unifi-controller
    hostname: unifi
    ports:
      - target: 3478
        published: 3478
        protocol: udp
      - target: 10001
        published: 10001
        protocol: udp
      - target: 8080
        published: 8080
      - target: 8443
        published: 8543
    environment:
      - "PUID=${UNIFI_PUID}"
      - "GUID=${UNIFI_GUID}"
    volumes:
      - "unifi-controller:/config"
    restart: unless-stopped

  recipes_db:
    image: postgres:11-alpine
    container_name: recipes_db
    hostname: recipes_db
    networks:
      traefik:
        ipv4_address: 172.20.0.9
    restart: unless-stopped
    env_file:
      - ./env-recipes
    volumes:
      - ./recipes/postgres:/var/lib/postgresql/data

  recipes_web:
    image: vabene1111/recipes
    container_name: recipes_web
    hostname: recipes_web
    networks:
      traefik:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    env_file:
      - ./env-recipes
    volumes:
      - ./recipes/staticfiles:/opt/recipes/staticfiles
      - ./recipes/mediafiles:/opt/recipes/mediafiles
    depends_on:
      - recipes_db

  recipes_nginx:
    image: nginx:mainline-alpine
    container_name: recipes_nginx
    hostname: recipes_nginx
    networks:
      traefik:
        ipv4_address: 172.20.0.8
    restart: unless-stopped
    env_file:
      - ./env-recipes
    volumes:
      - ./recipes/nginx/conf.d:/etc/nginx/conf.d
      - ./recipes/mediafiles:/media
    depends_on:
      - recipes_web
    labels:
      # Enable Traefik for this container (required when
      # --providers.docker.exposedbydefault=false is in use)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Router: recipes
      # Domain: recipes.${DOCKER_DOMAIN_NAME_EXTENSION}
      # Entrypoint: websecure
      - "traefik.http.routers.recipes.rule=Host(`recipes.${DOCKER_DOMAIN_NAME_EXTENSION}`)"
      - "traefik.http.routers.recipes.entrypoints=websecure"
      - "traefik.http.routers.recipes.tls=true"
      # Service: recipes
      # Port:    80
      - "traefik.http.services.recipes.loadbalancer.server.port=80"

  wireguard:
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    networks:
      traefik:
        ipv4_address: 172.20.0.11
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - "PUID=${WIREGUARD_PUID}"
      - "GUID=${WIREGUARD_GUID}"
      - "TZ=${WIREGUARD_TIMEZONE}"
      - "SERVERURL=${WIREGUARD_DOMAIN}"
      - "SERVERPORT=${WIREGUARD_SERVERPORT}" #optional
      - "PEERS=${WIREGUARD_PEERS}" #optional
      - "PEERDNS=172.20.0.3" # To the Pihole container using its Docker IP
      - "INTERNAL_SUBNET=${WIREGUARD_INTERNAL_SUBNET}" #optional
      - "ALLOWEDIPS=0.0.0.0/0" #optional
    volumes:
      - ./wireguard/config:/config
      - /lib/modules:/lib/modules
    ports:
      - target: 51820
        published: 51820
        protocol: udp
    dns:
      - 172.20.0.3 # To the Pihole container using its Docker IP
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  plex:
    image: plexinc/pms-docker
    container_name: plex
    networks:
      traefik:
        ipv4_address: 172.20.0.12
    environment:
      - "PLEX_CLAIM=${PLEX_CLAIM}"
      - "PUID=${PLEX_PUID}"
      - "GUID=${PLEX_GUID}"
      - "TZ=${PLEX_TIMEZONE}"
    volumes:
      - /plex/database:/config
      - /plex/transcode:/transcode
      - /plex/media:/data
    ports:
      - target: 32400
        published: 32400
        protocol: tcp
      - target: 3005
        published: 3005
        protocol: tcp
      - target: 8324
        published: 8324
        protocol: tcp
      - target: 32469
        published: 32469
        protocol: tcp
      - target: 1900
        published: 1900
        protocol: udp
      - target: 32410
        published: 32410
        protocol: udp
      - target: 32412
        published: 32412
        protocol: udp
      - target: 32413
        published: 32413
        protocol: udp
      - target: 32414
        published: 32414
        protocol: udp
    dns:
      - 172.20.0.3 # To the Pihole container using its Docker IP

networks:
  traefik:
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  portainer_data:
  firefly_iii_export:
  firefly_iii_upload:
  unifi-controller:
