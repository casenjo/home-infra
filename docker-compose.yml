version: "3.5"

services:
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    networks:
      pihole:
        ipv4_address: 172.20.0.2
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - target: 53
        published: 53
        protocol: tcp
      - target: 53
        published: 53
        protocol: udp
      - target: 67
        published: 67
        protocol: udp
      - target: 80 # Must not change, see: https://github.com/pi-hole/docker-pi-hole#tips-and-tricks
        published: 80
        protocol: tcp
      - target: 443 # Must not change, see: https://github.com/pi-hole/docker-pi-hole#tips-and-tricks
        published: 443
        protocol: tcp
    environment:
      - "TZ=America/Toronto"
      - "PROXY_LOCATION=pihole"
      - "VIRTUAL_PORT=80"
      - "DNS1=172.20.0.3#5053"
      - "DNS2=1.1.1.1"
    volumes:
      - "./pihole/etc-pihole/:/etc/pihole/"
      - "./pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/"
    restart: unless-stopped # Revert to always

  cloudflared:
    image: crazymax/cloudflared:latest
    container_name: cloudflared
    hostname: cloudflared
    networks:
      pihole:
        ipv4_address: 172.20.0.3
    environment:
      - "TZ=America/Toronto"
      - "TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
    restart: unless-stopped # Revert to always

  # openvpn:
  #   image: ovpn:latest
  #   container_name: openvpn
  #   hostname: openvpn
  #   networks:
  #     pihole:
  #   ports:
  #     - target: 1194
  #       published: 1194
  #       protocol: udp
  #   volumes:
  #     - "ovpn-data-lair:/etc/openvpn"
  #   cap_add:
  #     - NET_ADMIN

  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    domainname: ${DOCKER_DOMAIN_NAME_EXTENSION}
    hostname: portainer
    networks:
      - traefik
      - default
    ports:
      - target: 8000
        published: 8000
      - target: 9000
        published: 9000
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data portainer/portainer"
      - "./certs:/certs"
    command: --ssl
      --sslcert /certs/portainer.${DOCKER_DOMAIN_NAME_EXTENSION}.crt
      --sslkey /certs/portainer.${DOCKER_DOMAIN_NAME_EXTENSION}.key
    labels:
      # Enable Traefik for this container (required when using
      # --providers.docker.exposedbydefault=false for Traefik's config)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Create a service called "portainer" and configure its port to 9000
      # since its the port used for Portainer's web UI
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.services.portainer.loadbalancer.server.scheme=https"
      # Add a router named "portainer" to the routers, which is reached when
      # host is equal to portainer.${DOCKER_DOMAIN_NAME_EXTENSION}
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOCKER_DOMAIN_NAME_EXTENSION}`)"
      ## Use the websecure entrypoint for this router
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"

  # firefly:
  #   image: jc5x/firefly-iii:latest
  #   container_name: firefly
  #   hostname: firefly
  #   ports:
  #     - target: 8080
  #       published: 8081
  #   environment:
  #     - "APP_KEY=${FIREFLY_APP_KEY}"
  #     - "DB_HOST=${FIREFLY_DB_HOST}"
  #     - "DB_PORT=${FIREFLY_DB_PORT}"
  #     - "DB_DATABASE=${FIREFLY_DB_DATABASE}"
  #     - "DB_USERNAME=${FIREFLY_DB_USERNAME}"
  #     - "DB_PASSWORD=${FIREFLY_DB_PASSWORD}"
  #     - "DB_CONNECTION=${FIREFLY_DB_CONNECTION}"
  #   volumes:
  #     - "firefly_iii_export:/var/www/firefly-iii/storage/export"
  #     - "firefly_iii_upload:/var/www/firefly-iii/storage/upload"

  # unifi-controller:
  #   image: linuxserver/unifi-controller
  #   container_name: unifi-controller
  #   hostname: unifi
  #   ports:
  #     - target: 3478
  #       published: 3478
  #       protocol: udp
  #     - target: 10001
  #       published: 10001
  #       protocol: udp
  #     - target: 8080
  #       published: 8080
  #     - target: 8443
  #       published: 8443
  #   environment:
  #     - "PUID=${UNIFI_PUID}"
  #     - "GUID=${UNIFI_GUID}"
  #   volumes:
  #     - "unifi-controller:/config"
  #   restart: unless-stopped

  traefik:
    image: traefik:v2.2
    container_name: traefik
    domainname: ${DOCKER_DOMAIN_NAME_EXTENSION}
    hostname: traefik
    networks:
      - traefik
      - default
    dns:
      - 172.20.0.2
    ports:
      # The HTTP and HTTPS ports
      - "80:80"
      - "443:443"
    volumes:
      # Maps to the file that is used in traefik/traefik.toml
      - "./traefik/dynamic.toml:/dynamic.toml"
      - "./traefik/traefik.toml:/traefik.toml"
      - "./certs:/certs"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
    command: --api=true
      --api.dashboard=true
    labels:
      # Enable Traefik for this container (required when using
      # --providers.docker.exposedbydefault=false for Traefik's config)
      - "traefik.enable=true"
      # Use the special traefik network to communicate with Traefik
      - "traefik.docker.network=traefik"
      # Add a router named "dashboard" to the routers, which is reached when
      # host is equal to traefik.${DOCKER_DOMAIN_NAME_EXTENSION}
      # and it has /api or /dashboard in the path.
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOCKER_DOMAIN_NAME_EXTENSION}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD}"

networks:
  traefik:
    ipam:
      config:
        - subnet: 172.10.0.0/24

  pihole:
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  portainer_data:
  # firefly_iii_export:
  # firefly_iii_upload:
  # ovpn-data-lair:
  # unifi-controller:
